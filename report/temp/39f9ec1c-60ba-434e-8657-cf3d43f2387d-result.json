{"name": "商品详情1", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <testcase.productManager.test_productList.TestProduct object at 0x00000176A3DDFF48>\nbase_info = {'api-name': '商品详情', 'header': {'Content-Type': 'application/json;charset=UTF-8'}, 'method': 'post', 'url': '/coupApply/cms/productDetail'}\ntestcase = {'json': {'page': 1, 'pro_id': '${get_extract_data(goodsId,0)}', 'sise': 20}}\n\n    @pytest.mark.parametrize(\"base_info,testcase\", readTestCase(\"./testcase/productManager/productDetail.yaml\"))\n    def test_get_product_detail(self, base_info, testcase):\n        allure.dynamic.title(testcase[\"case_name\"])\n>       BaseRequests().specification_yaml(base_info, testcase)\n\ntestcase\\productManager\\test_productList.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase\\apiutil.py:116: in specification_yaml\n    test_case[key] = self.replace_laod(value)  # 解析,重写获取字典\nbase\\apiutil.py:49: in replace_laod\n    extract_data = getattr(DebufTalk(), func_name)(*func_params.split(',') if func_params else \"\")\ncommon\\debugTalk.py:18: in get_extract_data\n    data = self.OperateYaml.get_extract_yaml(node_name)  # 根据键名获取extract中间文件的结果\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.readYaml.ReadYamlData object at 0x00000176A3DDF7C8>, node_name = 'goodsId'\n\n    def get_extract_yaml(self, node_name):\n        file_path = FILE_PATH[\"extract\"]  # 获取配置中的\n        if os.path.exists(file_path):\n            pass\n        else:\n            print(\"extract.yaml不存在\")\n            file = open(file_path, \"w\")\n            file.close()\n            print(\"创建成功\")\n    \n        with open(file_path, \"r\", encoding=\"utf-8\") as rf:\n            extract_data = yaml.safe_load(rf)\n            print(f\"提取出的{node_name}为:{extract_data}\")\n    \n>       return extract_data[node_name]\nE       TypeError: 'NoneType' object is not subscriptable\n\ncommon\\readYaml.py:65: TypeError"}, "attachments": [{"name": "接口地址:http://127.0.0.1:8787/coupApply/cms/productDetail", "source": "4c1b76bb-ace3-4230-92ad-b86b1e09391a-attachment.txt", "type": "text/plain"}, {"name": "接口名称:商品详情", "source": "8adccde3-4c08-429f-a713-b734f4384d84-attachment.txt", "type": "text/plain"}, {"name": "请求头:{'Content-Type': 'application/json;charset=UTF-8'}", "source": "47af589f-5758-45d4-ae03-66e3e16b3368-attachment.txt", "type": "text/plain"}, {"name": "请求方法:post", "source": "95889058-118d-4295-b8ec-97e065cf8189-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "base_info", "value": "{'api-name': '商品详情', 'url': '/coupApply/cms/productDetail', 'method': 'post', 'header': {'Content-Type': 'application/json;charset=UTF-8'}}"}, {"name": "testcase", "value": "{'case_name': '商品详情1', 'json': {'pro_id': '${get_extract_data(goodsId,0)}', 'page': 1, 'sise': 20}, 'validation': [{'contains': {'error_code': '0000'}}], 'extract_list': {'goodsId': '$.goodsList[*].goodsId'}}"}], "start": 1712166121586, "stop": 1712166121594, "uuid": "ad7ad1fc-4f3e-4d26-8c8e-7c9cb2398aaf", "historyId": "019f365339005ddbdfbf576a93ca8c2e", "testCaseId": "c3f0cf5e3de363d8840709aeceaa020e", "fullName": "testcase.productManager.test_productList.TestProduct#test_get_product_detail", "labels": [{"name": "feature", "value": "商品接口"}, {"name": "parentSuite", "value": "testcase.productManager"}, {"name": "suite", "value": "test_productList"}, {"name": "subSuite", "value": "TestProduct"}, {"name": "host", "value": "LAPTOP-I0ETAENS"}, {"name": "thread", "value": "5888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.productManager.test_productList"}]}