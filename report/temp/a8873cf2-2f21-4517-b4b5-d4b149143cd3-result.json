{"name": "用户名和密码错误", "status": "broken", "statusDetails": {"message": "KeyError: 'access_token_cookie'", "trace": "self = <test_login.TestLogin object at 0x00000176A3D81088>\nbase_info = {'api-name': '用户登录', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '${get_extract_data(token)}'}, 'method': 'post', 'url': '/dar/user/login'}\ntestcase = {'data': {'passwd': 123, 'user_name': 'test02'}}\n\n    @pytest.mark.order(1)\n    @pytest.mark.parametrize(\"base_info,testcase\", readTestCase(\"./testcase/Login/login.yaml\"))  # 传入yaml文件中的参数\n    def test_Login01(self, base_info, testcase):\n        # logs.info(f\"参数化为:{params}\")\n        # print(\"传递参数为\", params)\n        allure.dynamic.title(testcase[\"case_name\"])\n>       BaseRequests().specification_yaml(base_info, testcase)\n\ntestcase\\Login\\test_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.apiutil.BaseRequests object at 0x00000176A3E40D08>\nbase_info = {'api-name': '用户登录', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '${get_extract_data(token)}'}, 'method': 'post', 'url': '/dar/user/login'}\ntest_case = {'data': {'passwd': 123, 'user_name': 'test02'}}\n\n    def specification_yaml(self, base_info, test_case):  # 规范yaml测试接口\n        print(\"调用一次specification_yaml\")\n        # print(\"每个测试用例为:\",test_case)\n        '''\n        :param yaml_dict:列表类型\n        :return:\n        '''\n        params_type = [\"params\", \"data\", \"json\"]\n    \n        # try:#加上try_catch可能无法捕获Assertion错误\n        base_url = self.OprateConf.get_envi(\"host\")\n        url = base_url + base_info[\"url\"]\n        api_name = base_info[\"api-name\"]\n        method = base_info[\"method\"]\n        header = base_info[\"header\"]\n        print(api_name)\n    \n        # attach展示必须要字符串\n        allure.attach(url, f\"接口地址:{url}\", allure.attachment_type.TEXT)  # 第二个参数是消息展示的格式， 字符串+s 表示格式化,个性化配置allure输出\n        allure.attach(api_name, f\"接口名称:{api_name}\", allure.attachment_type.TEXT)\n        allure.attach(str(header), f\"请求头:{str(header)}\", allure.attachment_type.TEXT)\n        allure.attach(method, f\"请求方法:{method}\", allure.attachment_type.TEXT)\n    \n        cookie = {}\n        print(type(cookie))\n        try:\n            print(\"yaml用例信息的cookies为\", base_info[\"cookies\"], \"类型为\", type(base_info[\"cookies\"]))\n            cookieStr = self.replace_laod(base_info[\"cookies\"])  # 解析表达式获取cookie\n            # print(\"获取到cookie为:\", cookie)\n            # print(type(cookie))\n            cookie = json.loads(cookieStr)\n            print(\"cookie的类型为\", type(cookie))\n            print(\"cookie为\", cookie[\"access_token_cookie\"])\n        except:\n            pass\n        print(\"构造参数\")\n    \n        case_name = test_case.pop(\"case_name\")\n        val = self.replace_laod(test_case.get(\"validation\"))\n        test_case[\"validation\"] = json.loads(val)  # 替换之后要把字符串重新转换为dict对象\n        validation = test_case.pop(\"validation\")\n        # print(\"validation为\", validation)\n        extract = test_case.pop(\"extract\", None)\n        extract_list = test_case.pop(\"extract_list\", None)\n        for key, value in test_case.items():  # 遍历dict中的所有键值对\n            if key in params_type:  # 如果属于param、data、json格式\n                test_case[key] = self.replace_laod(value)  # 解析,重写获取字典\n        print(\"-----------------------------\")\n        print(\"testcase为\", test_case)\n        print(\"获取到的test_case长度为\", len(test_case.keys()))\n        Params = {}\n        if len(test_case.keys()) != 0:\n            ArgType = list(test_case.keys())[0]  # 获取参数类型，params、data、json\n            Params = {\n                ArgType: test_case[ArgType],\n>               \"cookies\": cookie[\"access_token_cookie\"]#有问题\n            }  # 获取不定类型的参数\nE           KeyError: 'access_token_cookie'\n\nbase\\apiutil.py:125: KeyError"}, "attachments": [{"name": "接口地址:http://127.0.0.1:8787/dar/user/login", "source": "be27a76d-438a-415a-bd86-0d02648b7dd7-attachment.txt", "type": "text/plain"}, {"name": "接口名称:用户登录", "source": "079d5423-2888-4fb9-9683-0a52a67f12fb-attachment.txt", "type": "text/plain"}, {"name": "请求头:{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '${get_extract_data(token)}'}", "source": "ee100083-f10d-4069-b131-5f7649b7d633-attachment.txt", "type": "text/plain"}, {"name": "请求方法:post", "source": "5f114d4c-0e43-4a27-964d-8bc95d8adc9b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "base_info", "value": "{'api-name': '用户登录', 'url': '/dar/user/login', 'method': 'post', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '${get_extract_data(token)}'}}"}, {"name": "testcase", "value": "{'case_name': '用户名和密码错误', 'data': {'user_name': 'test02', 'passwd': 123}, 'validation': [{'contains': {'msg': '登录失败'}}], 'extract_list': {'token': '$.token'}}"}], "start": 1712166121468, "stop": 1712166121474, "uuid": "8b0306a5-5999-443b-9977-90c9b0fee058", "historyId": "8a7d41319c5a6e03ae2eb0393e256084", "testCaseId": "5e67f83d9d3c3a0a24fc4497f9cd5c57", "fullName": "testcase.Login.test_login.TestLogin#test_Login01", "labels": [{"name": "feature", "value": "登录接口"}, {"name": "tag", "value": "order(1)"}, {"name": "parentSuite", "value": "testcase.Login"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-I0ETAENS"}, {"name": "thread", "value": "5888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Login.test_login"}]}